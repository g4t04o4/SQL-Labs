/*
       FIRST LAB
*/

--1.4
SELECT *
FROM DEPARTMENTS;

--1.5
SELECT EMPLOYEE_ID,
       LAST_NAME,
       JOB_ID,
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS "StartDate"
FROM EMPLOYEES;

--1.7
SELECT DISTINCT JOB_ID
FROM EMPLOYEES;

--1.8
SELECT EMPLOYEE_ID                                                  AS "Emp #",
       LAST_NAME                                                    AS "Employee",
       JOB_ID                                                       AS "Job",
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS "Hire Date"
FROM EMPLOYEES;

--1.9
SELECT LAST_NAME || ', ' || JOB_ID AS "Employee and Title"
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID;

--1.10
SELECT EMPLOYEE_ID || ',' ||
       FIRST_NAME || ',' ||
       LAST_NAME || ',' ||
       UPPER(SUBSTR(FIRST_NAME, 0, 1) || LAST_NAME) || ',' ||
       PHONE_NUMBER || ',' ||
       JOB_ID || ',' ||
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') || ',' ||
       SALARY || ',' ||
       COMMISSION_PCT || ',' ||
       MANAGER_ID || ',' ||
       DEPARTMENT_ID AS THE_OUTPUT
FROM EMPLOYEES;

/*
       SECOND LAB
 */

--2.1
SELECT LAST_NAME, to_number(SALARY, '99999') AS SALARY
FROM EMPLOYEES
WHERE SALARY > 12000;

--2.2
SELECT LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 176;

--2.3
SELECT LAST_NAME, to_number(SALARY, '99999') AS SALARY
FROM EMPLOYEES
WHERE SALARY NOT BETWEEN 5000 AND 12000;

--2.4
SELECT LAST_NAME,
       JOB_ID,
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN to_date('20.02.2008', 'dd.mm.yyyy')
        AND to_date('01.03.2008', 'dd.mm.yyyy')
ORDER BY HIRE_DATE ASC;

--2.5
SELECT LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (20, 50)
ORDER BY LAST_NAME ASC;

--2.6
SELECT LAST_NAME                  AS "Employee",
       to_number(SALARY, '99999') AS "Monthly Salary"
FROM EMPLOYEES
WHERE SALARY BETWEEN 5000 AND 12000
  AND DEPARTMENT_ID IN (20, 50);

--2.7
SELECT LAST_NAME, to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS HIRE_DATE
FROM EMPLOYEES
WHERE to_char(HIRE_DATE, 'yyyy') = '2004';

--2.8
SELECT LAST_NAME, JOB_ID
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;

--2.9
SELECT LAST_NAME,
       to_number(SALARY, '99999')       AS SALARY,
       to_char(COMMISSION_PCT, 'fm.99') AS COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC;

--2.10
SELECT LAST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > $(salary?);

--2.11
SELECT EMPLOYEE_ID, LAST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE MANAGER_ID = $(manager?);

--2.12
SELECT LAST_NAME
FROM EMPLOYEES
WHERE LAST_NAME LIKE '__a%';

--2.12 alternative
SELECT LAST_NAME
FROM EMPLOYEES
WHERE substr(LAST_NAME, 3, 1) = 'a';

--2.13
SELECT LAST_NAME
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%a%'
  AND LAST_NAME LIKE '%e%';

--2.14
SELECT LAST_NAME, JOB_ID, to_number(SALARY, '99999') AS SALARY
FROM EMPLOYEES
WHERE JOB_ID IN ('SA_REP', 'ST_CLERK')
  AND SALARY NOT IN (2500, 3500, 7000);

--2.15
SELECT LAST_NAME                        AS "Employee",
       to_number(SALARY, '99999')       AS "Monthly Salary",
       to_char(COMMISSION_PCT, 'fm.99') AS COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT = 0.2;

/*
       THIRD LAB
       FIRST PART
 */

--3_1.1
SELECT to_char(sysdate, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS "Date"
FROM DUAL;

--3_1.2
SELECT EMPLOYEE_ID,
       LAST_NAME,
       to_number(SALARY, '99999') AS SALARY,
       round(SALARY * 1.155)      AS "New Salary"
FROM EMPLOYEES;

--3_1.4
SELECT EMPLOYEE_ID,
       LAST_NAME,
       to_number(SALARY, '99999')     AS SALARY,
       round(SALARY * 1.155)          AS "New Salary",
       round(SALARY * 1.155) - SALARY AS "Increase"
FROM EMPLOYEES;

--3_1.5
SELECT upper(substr(LAST_NAME, 0, 1)) || lower(substr(LAST_NAME, 2)) AS "Name",
       length(LAST_NAME)                                             AS "Length"
FROM EMPLOYEES
WHERE substr(LAST_NAME, 0, 1) IN ('J', 'A', 'M')
ORDER BY LAST_NAME ASC;

--3_1.6
SELECT upper(substr(LAST_NAME, 0, 1)) || lower(substr(LAST_NAME, 2)) AS "Name",
       length(LAST_NAME)                                             AS "Length"
FROM EMPLOYEES
WHERE LAST_NAME LIKE (upper(&liter)) || '%';

--3_1.7
SELECT LAST_NAME,
       round(months_between(sysdate, HIRE_DATE)) AS MONTHS_WORKED
FROM EMPLOYEES
ORDER BY MONTHS_WORKED ASC;

/*
       THIRD LAB
       SECOND PART
       THIRD METALLICA ALBUM
       SOMEBODY KILL ME
 */

--3_2.1
SELECT LAST_NAME || ' earns ' ||
       trim(to_char(SALARY, '$99,999.99')) || ' monthly but wants ' ||
       trim(to_char(SALARY * 3, '$99,999.99')) AS "Dream Salaries"
FROM EMPLOYEES;

--3_2.2
SELECT LAST_NAME,
       replace(to_char(SALARY, '999999999999999'), ' ', '$') AS SALARY
FROM EMPLOYEES;

--3_2.3
SELECT LAST_NAME,
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english')  AS HIRE_DATE,
       'Monday, ' ||
       to_char(
           next_day(
               add_months(HIRE_DATE, 6),
               to_char(to_date('03/09/1982', 'dd/mm/yyyy'), 'DAY')),
           'fmDdspth "of" Month, YYYY', 'NLS_DATE_LANGUAGE=english') AS REVIEW
FROM EMPLOYEES;

--3_2.4
SELECT LAST_NAME,
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS HIRE_DATE,
       to_char(HIRE_DATE, 'DAY', 'NLS_DATE_LANGUAGE=english')       AS DAY
FROM EMPLOYEES
ORDER BY to_number(to_char(EMPLOYEES.HIRE_DATE, 'D')) ASC;

--3_2.5
SELECT LAST_NAME,
       nvl(to_char(COMMISSION_PCT), 'No Commission') AS COMM
FROM EMPLOYEES;

--3_2.6
SELECT rpad(LAST_NAME, 15) || lpad(' ', round(SALARY / 1000) + 1, '*')
         AS "EMPLOYEES AND THEIR SALARIES"
FROM EMPLOYEES
ORDER BY SALARY DESC;

--3_2.7
SELECT JOB_ID,
       decode(JOB_ID,
              'AD_PRES', 'A',
              'ST_MAN', 'B',
              'IT_PROG', 'C',
              'SA_REP', 'D',
              'ST_CLERK', 'E',
              '0') AS GRADE
FROM EMPLOYEES;

--3_2.8
SELECT JOB_ID,
       CASE JOB_ID
         WHEN 'AD_PRES'
           THEN 'A'
         WHEN 'ST_MAN'
           THEN 'B'
         WHEN 'IT_PROG'
           THEN 'C'
         WHEN 'SA_REP'
           THEN 'D'
         WHEN 'ST_CLERK'
           THEN 'E'
         ELSE '0' END
         AS GRADE
FROM EMPLOYEES;

/*
  FOURTH LABitmakesmewanttokillmyself11111
 */

--4.1
SELECT max(SALARY)        AS "Maximum",
       min(SALARY)        AS "Minimum",
       sum(SALARY)        AS "Sum",
       round(avg(SALARY)) AS "Average"
FROM EMPLOYEES;

--4.2
SELECT JOB_ID,
       max(SALARY)        AS "Maximum",
       min(SALARY)        AS "Minimum",
       sum(SALARY)        AS "Sum",
       round(avg(SALARY)) AS "Average"
FROM EMPLOYEES
GROUP BY JOB_ID;

--4.3
SELECT JOB_ID, count(EMPLOYEE_ID) AS CNT
FROM EMPLOYEES
GROUP BY JOB_ID;

--4.4
SELECT count(DISTINCT MANAGER_ID)
FROM EMPLOYEES;

--4.5
SELECT max(SALARY) - min(SALARY) AS DIFFERENCE
FROM EMPLOYEES;

--4.6
SELECT MANAGER_ID, min(SALARY) AS MIN_SALARY
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID
HAVING min(SALARY) >= 6000
ORDER BY MIN_SALARY DESC;

--4.7
SELECT count(EMPLOYEE_ID)            AS TOTAL,
       count(CASE extract(YEAR FROM HIRE_DATE)
               WHEN 2005 THEN 1 END) AS "2005",
       count(CASE extract(YEAR FROM HIRE_DATE)
               WHEN 2006 THEN 1 END) AS "2006",
       count(CASE extract(YEAR FROM HIRE_DATE)
               WHEN 2007 THEN 1 END) AS "2007",
       count(CASE extract(YEAR FROM HIRE_DATE)
               WHEN 2008 THEN 1 END) AS "2008"
FROM EMPLOYEES;

--4.8
SELECT JOB_ID AS "Job",
       nvl(to_char(sum(
           CASE DEPARTMENT_ID
             WHEN 20 THEN SALARY END)), ' ')
              AS "Dept20",
       nvl(to_char(sum(
           CASE DEPARTMENT_ID
             WHEN 50 THEN SALARY END)), ' ')
              AS "Dept50",
       nvl(to_char(sum(
           CASE DEPARTMENT_ID
             WHEN 80 THEN SALARY END)), ' ')
              AS "Dept80",
       nvl(to_char(sum(
           CASE DEPARTMENT_ID
             WHEN 90 THEN SALARY END)), ' ')
              AS "Dept90",
       nvl(sum(CASE DEPARTMENT_ID
                 WHEN 20 THEN SALARY END), 0) +
       nvl(sum(CASE DEPARTMENT_ID
                 WHEN 50 THEN SALARY END), 0) +
       nvl(sum(CASE DEPARTMENT_ID
                 WHEN 80 THEN SALARY END), 0) +
       nvl(sum(CASE DEPARTMENT_ID
                 WHEN 90 THEN SALARY END), 0)
              AS "Total"
FROM EMPLOYEES
GROUP BY JOB_ID;

/*

  FIFTH LAB

 */

--5.1

SELECT DEPARTMENT_NAME    AS "Name",
       LOCATION_ID        AS "Location",
       count(EMPLOYEE_ID) AS "Number of People",
       round(avg(SALARY)) AS "Salary"
FROM DEPARTMENTS
       JOIN EMPLOYEES ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
GROUP BY DEPARTMENT_NAME, LOCATION_ID;

--5.2

SELECT LAST_NAME, EMPLOYEES.DEPARTMENT_ID, DEPARTMENT_NAME
FROM EMPLOYEES
       JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

--5.3

SELECT DISTINCT JOBS.JOB_ID, DEPARTMENTS.LOCATION_ID
FROM JOBS
       JOIN EMPLOYEES ON JOBS.JOB_ID = EMPLOYEES.JOB_ID
       JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE EMPLOYEES.DEPARTMENT_ID = 80;

--5.4

SELECT LAST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES
       JOIN DEPARTMENTS D ON EMPLOYEES.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE LAST_NAME LIKE '%a%';

--5.5

SELECT E.LAST_NAME,
       E.JOB_ID,
       E.DEPARTMENT_ID,
       D.DEPARTMENT_NAME
FROM EMPLOYEES E
       JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
       JOIN LOCATIONS L2 ON D.LOCATION_ID = L2.LOCATION_ID
WHERE CITY = 'Toronto';

--5.6

SELECT E1.LAST_NAME   AS "Employee",
       E1.EMPLOYEE_ID AS "Emp#",
       E2.LAST_NAME   AS "Manager",
       E2.EMPLOYEE_ID AS "Mgr#"
FROM EMPLOYEES E1
       INNER JOIN EMPLOYEES E2 ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

--5.7

SELECT E1.LAST_NAME                      AS "Employee",
       E1.EMPLOYEE_ID                    AS "Emp#",
       nvl(E2.LAST_NAME, ' ')            AS "Manager",
       nvl(to_char(E2.EMPLOYEE_ID), ' ') AS "Mgr#"
FROM EMPLOYEES E1
       LEFT OUTER JOIN EMPLOYEES E2 ON E1.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY E1.EMPLOYEE_ID ASC;

--5.8

SELECT E1.DEPARTMENT_ID AS DEPARTMENT,
       E1.LAST_NAME     AS EMPLOYEE,
       E2.LAST_NAME     AS COLLEAGUE
FROM EMPLOYEES E1
       INNER JOIN EMPLOYEES E2 ON E1.EMPLOYEE_ID != E2.EMPLOYEE_ID
  AND E1.DEPARTMENT_ID = E2.DEPARTMENT_ID;

--5.9

SELECT E.LAST_NAME, E.JOB_ID, D.DEPARTMENT_NAME, E.SALARY, GRADE_LEVEL
FROM EMPLOYEES E
       LEFT OUTER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
       JOIN JOB_GRADES ON (SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL);

--5.10

SELECT E1.LAST_NAME,
       to_char(E1.HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS HIRE_DATE
FROM EMPLOYEES E1
       JOIN EMPLOYEES E2 ON (E2.LAST_NAME = 'Davies')
  AND (E1.HIRE_DATE > E2.HIRE_DATE);

--5.11

SELECT E.LAST_NAME                                                    AS "Employee",
       to_char(E.HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS "Emp Hired",
       M.LAST_NAME                                                    AS "Manager",
       to_char(M.HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS "Mgr Hired"
FROM EMPLOYEES E
       JOIN EMPLOYEES M ON E.MANAGER_ID = M.EMPLOYEE_ID
  AND E.HIRE_DATE < M.HIRE_DATE;

--5.12

SELECT D.DEPARTMENT_ID,
       D.DEPARTMENT_NAME,
       D.LOCATION_ID,
       count(EMPLOYEE_ID) AS COUNT
FROM DEPARTMENTS D
       LEFT OUTER JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME, LOCATION_ID
ORDER BY D.DEPARTMENT_ID ASC;

--5.13

SELECT JOB_ID, count(EMPLOYEE_ID) AS FREQUENCY
FROM DEPARTMENTS D
       JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
  AND D.DEPARTMENT_NAME IN ('Administration', 'Executive')
GROUP BY JOB_ID
ORDER BY FREQUENCY DESC;

--5.14

SELECT E.LAST_NAME,
       M.LAST_NAME,
       to_char(M.SALARY, '999999') AS SALARY,
       GRADE_LEVEL                 AS GRA
FROM EMPLOYEES E
       JOIN EMPLOYEES M ON E.MANAGER_ID = M.EMPLOYEE_ID AND M.SALARY > 15000
       JOIN JOB_GRADES ON M.SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL;

--5.15

SELECT LAST_NAME, DEPARTMENT_NAME, D.LOCATION_ID, CITY
FROM EMPLOYEES E
       JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  AND E.COMMISSION_PCT IS NOT NULL
       JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID;

/*
  SIXTH LAB
*/

--6.1
SELECT E2.LAST_NAME,
       to_char(E2.HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS HIRE_DATE
FROM EMPLOYEES E1
       JOIN EMPLOYEES E2 ON E1.LAST_NAME = 'Zlotkey'
  AND E1.DEPARTMENT_ID = E2.DEPARTMENT_ID
  AND E1.EMPLOYEE_ID != E2.EMPLOYEE_ID;

SELECT LAST_NAME,
       to_char(HIRE_DATE, 'dd-MON-RR', 'NLS_DATE_LANGUAGE=english') AS HIRE_DATE
FROM EMPLOYEES
WHERE LAST_NAME != 'Zlotkey'
  AND DEPARTMENT_ID IN
      (SELECT DEPARTMENT_ID
       FROM EMPLOYEES
       WHERE LAST_NAME = 'Zlotkey');

--6.2

WITH S1 AS
       (SELECT avg(SALARY) AS SAL
        FROM EMPLOYEES)
SELECT EMPLOYEE_ID,
       LAST_NAME,
       to_char(SALARY, '999999') AS SALARY
FROM EMPLOYEES,
     S1
WHERE SALARY > SAL;

--6.3

SELECT EMPLOYEE_ID, LAST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN
      (SELECT DEPARTMENT_ID
       FROM EMPLOYEES
       WHERE LAST_NAME LIKE '%u%');

--6.4

SELECT LAST_NAME, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN
      (SELECT DEPARTMENT_ID
       FROM DEPARTMENTS
       WHERE LOCATION_ID = 1700);

--6.5

SELECT LAST_NAME, to_char(SALARY, '999999') AS SALARY
FROM EMPLOYEES
WHERE MANAGER_ID IN
      (SELECT EMPLOYEE_ID
       FROM EMPLOYEES
       WHERE LAST_NAME = 'King');

--6.6

SELECT DEPARTMENT_ID, LAST_NAME, JOB_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN
      (SELECT DEPARTMENT_ID
       FROM DEPARTMENTS
       WHERE DEPARTMENT_NAME = 'Executive');

--6.7

SELECT EMPLOYEE_ID,
       LAST_NAME,
       to_char(SALARY, '999999') AS SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN
      (SELECT DEPARTMENT_ID
       FROM EMPLOYEES
       WHERE LAST_NAME LIKE '%u%')
  AND SALARY > (SELECT avg(SALARY)
                FROM EMPLOYEES);

--6.8

SELECT DEPARTMENT_ID, min(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN
      (SELECT DEPARTMENT_ID
       FROM (SELECT DEPARTMENT_ID,
                    avg(SALARY) AS SAL
             FROM EMPLOYEES
             GROUP BY DEPARTMENT_ID
             ORDER BY SAL DESC)
       WHERE ROWNUM = 1)
GROUP BY DEPARTMENT_ID;

--6.9

SELECT DEPARTMENT_ID,
       DEPARTMENT_NAME,
       MANAGER_ID,
       LOCATION_ID
FROM DEPARTMENTS
WHERE DEPARTMENT_ID NOT IN
      (SELECT DISTINCT DEPARTMENT_ID
       FROM EMPLOYEES
       WHERE JOB_ID = 'SA_REP'
         AND DEPARTMENT_ID IS NOT NULL);

/*
    SEVENTH LAB
  */

--7.1

SELECT DEPARTMENT_ID
FROM DEPARTMENTS
MINUS
SELECT DEPARTMENT_ID
FROM EMPLOYEES
WHERE JOB_ID = 'ST_CLERK';

--7.2

SELECT COUNTRY_ID AS CO, COUNTRY_NAME
FROM COUNTRIES
MINUS
SELECT COUNTRIES.COUNTRY_ID AS CO, COUNTRY_NAME
FROM COUNTRIES
       JOIN LOCATIONS ON COUNTRIES.COUNTRY_ID = LOCATIONS.COUNTRY_ID
       JOIN DEPARTMENTS ON LOCATIONS.LOCATION_ID = DEPARTMENTS.LOCATION_ID;

--7.3

SELECT DISTINCT JOB_ID, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = '10'
UNION ALL
SELECT DISTINCT JOB_ID, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = '50'
UNION ALL
SELECT DISTINCT JOB_ID, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = '20';

--7.4

SELECT DISTINCT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
INTERSECT
SELECT DISTINCT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY;

--7.5

SELECT DISTINCT to_char(EMPLOYEE_ID) AS EMPLOYEE_ID,
                DEPARTMENT_ID,
                TO_CHAR(' ')         AS DEPARTMENT_NAME
FROM EMPLOYEES
UNION ALL
SELECT DISTINCT to_char(' '),
                DEPARTMENT_ID,
                DEPARTMENT_NAME
FROM DEPARTMENTS;

/*
  EIGHTH LAB
 */

--8.1

CREATE TABLE MY_EMPLOYEE
(
  ID         NUMBER(4)
    CONSTRAINT MY_EMPLOYEE_ID_NN NOT NULL,
  LAST_NAME  VARCHAR2(25),
  FIRST_NAME VARCHAR2(25),
  USERID     VARCHAR2(8),
  SALARY     NUMBER(9, 2)
);

--8.2

DESCRIBE my_employee;

--8.3

INSERT INTO MY_EMPLOYEE
VALUES (1, 'Patel', 'Ralph', 'rpatel', 895);

--8.4

INSERT INTO MY_EMPLOYEE (ID, LAST_NAME, FIRST_NAME, USERID, SALARY)
VALUES (2, 'Dancs', 'Betty', 'bdancs', 860);

--8.5

SELECT *
FROM MY_EMPLOYEE;

--8.6

INSERT INTO MY_EMPLOYEE(ID, LAST_NAME, FIRST_NAME, USERID, SALARY)
VALUES (&ID, '&&LAST_NAME', '&&FIRST_NAME',
        substr(LOWER(SUBSTR('&FIRST_NAME', 1, 1) || '&LAST_NAME'), 1, 8), &SALARY);
UNDEFINE FIRST_NAME;
UNDEFINE LAST_NAME;

--8.9

COMMIT;

--8.9

UPDATE MY_EMPLOYEE
SET LAST_NAME = 'Drexler'
WHERE ID = 3;

--8.10

UPDATE MY_EMPLOYEE
SET SALARY = 1000
WHERE SALARY < 900;

--8.13

DELETE
FROM MY_EMPLOYEE
WHERE FIRST_NAME = 'Betty'
  AND LAST_NAME = 'Dancs';

--8.18

SAVEPOINT FIRST;

--8.19

DELETE
FROM MY_EMPLOYEE;

--8.21

ROLLBACK TO FIRST;

--temp

SELECT E.LAST_NAME, D.DEPARTMENT_NAME, L.CITY
FROM EMPLOYEES E
       JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
       JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID;

/*
  NINTH LAB
 */

--9.1

CREATE TABLE DEPT
(
  ID   NUMBER(7)    NOT NULL,
  NAME VARCHAR2(25) NOT NULL,
  CONSTRAINT DEPT_CONSTRAINT_PK PRIMARY KEY (ID)
);

--9.2
INSERT INTO DEPT (ID, NAME)
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS;

SELECT *
FROM DEPT;

--9.3

CREATE TABLE EMP
(
  ID         NUMBER(7)    NOT NULL,
  LAST_NAME  VARCHAR2(25) NOT NULL,
  FIRST_NAME VARCHAR2(25) NOT NULL,
  DEPT_ID    NUMBER(7)    NOT NULL,
  CONSTRAINT EMP_CONSTRAINT_PK PRIMARY KEY (ID),
  CONSTRAINT EMP_CONSTRAINT_FK_DEPT FOREIGN KEY (DEPT_ID) REFERENCES DEPT (ID)
);

--9.4

CREATE TABLE EMPLOYEES2 AS
SELECT EMPLOYEE_ID   AS ID,
       FIRST_NAME,
       LAST_NAME,
       SALARY,
       DEPARTMENT_ID AS DEPT_ID
FROM EMPLOYEES;

--9.5

DROP TABLE EMP;

/*
  TENTH LAB
      FIRST PART
 */

--10_1.1

CREATE VIEW EMPLOYEE_VU AS
SELECT EMPLOYEE_ID,
       LAST_NAME AS EMPLOYEE,
       DEPARTMENT_ID
FROM EMPLOYEES;

--10_1.2

SELECT *
FROM EMPLOYEE_VU;

--10_1.3

SELECT EMPLOYEE, DEPARTMENT_ID
FROM EMPLOYEE_VU;

--10_1.4

CREATE VIEW DEPT50 AS
SELECT EMPLOYEE_ID   AS EMPNO,
       LAST_NAME     AS EMPLOYEE,
       DEPARTMENT_ID AS DEPTNO
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50 WITH CHECK OPTION;

--10_1.5

SELECT *
FROM DEPT50;

--10_1.6

UPDATE DEPT50
SET DEPTNO = 80
WHERE EMPLOYEE = 'Matos';

--10_1.7

CREATE VIEW SALARY_VU AS
SELECT LAST_NAME       AS EMPLOYEE,
       DEPARTMENT_NAME AS DEPARTMENT,
       SALARY,
       GRADE_LEVEL     AS GRADE
FROM EMPLOYEES
       LEFT OUTER JOIN DEPARTMENTS USING (DEPARTMENT_ID)
       JOIN JOB_GRADES ON SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL;

SELECT *
FROM SALARY_VU;

/*
  TENTH LAB
      SECOND PART
 */

--10_2.1

CREATE SEQUENCE DEPT_ID_SEQ
  START WITH 200
  MINVALUE 200
  MAXVALUE 1000
  INCREMENT BY 10
  NOCACHE
  NOCYCLE;

--10_2.2

INSERT INTO DEPT(ID, NAME)
VALUES (DEPT_ID_SEQ.NEXTVAL, &dept_name);

--10_2.3

ALTER TABLE EMPLOYEES2
  ADD CONSTRAINT EMPLOYEES2_CONSTRAINT_FK_DEPT
    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENTS (DEPARTMENT_ID);

CREATE INDEX EMPLOYEES2_INDEX_DEPT ON EMPLOYEES2 (DEPT_ID);

--10_2.4

CREATE SYNONYM EMP FOR EMPLOYEES;


/*
  ELEVENTH LAB
 */

--11.1

SELECT COLUMN_NAME,
       DATA_TYPE,
       DATA_LENGTH,
       DATA_PRECISION AS PRECISION,
       DATA_SCALE     AS SCALE,
       NULLABLE       AS N
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME = upper(&table_name);

--11.2

SELECT USER_CONS_COLUMNS.COLUMN_NAME,
       USER_CONSTRAINTS.CONSTRAINT_NAME,
       USER_CONSTRAINTS.CONSTRAINT_TYPE AS C,
       SEARCH_CONDITION,
       STATUS
FROM USER_CONSTRAINTS
       JOIN USER_CONS_COLUMNS
            ON USER_CONSTRAINTS.CONSTRAINT_NAME = USER_CONS_COLUMNS.CONSTRAINT_NAME
WHERE USER_CONSTRAINTS.TABLE_NAME = upper(&table_name);

--11.3

COMMENT ON TABLE DEPARTMENTS IS
  'Company department information including name, code and location';

SELECT COMMENTS
FROM USER_TAB_COMMENTS
WHERE TABLE_NAME = upper('departments');

--11.4

COMMENT ON COLUMN EMPLOYEES.LAST_NAME IS
  'Last name of the employee';

SELECT COMMENTS
FROM USER_COL_COMMENTS
WHERE TABLE_NAME = 'EMPLOYEES'
  AND COLUMN_NAME = 'LAST_NAME';

--11.5

SELECT *
FROM USER_SYNONYMS;

--11.6

--SET long 25;
SELECT VIEW_NAME, TEXT
FROM USER_VIEWS;

--11.7

SELECT SEQUENCE_NAME,
       (CASE
          WHEN length(MAX_VALUE) < 5
            THEN to_char(MAX_VALUE, '9999')
          ELSE to_char(MAX_VALUE, '9.9999EEEE')
         END) AS MAX_VALUE,
       INCREMENT_BY,
       LAST_NUMBER
FROM USER_SEQUENCES;